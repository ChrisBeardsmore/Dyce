import streamlit as st
import json
import requests
from datetime import datetime

st.set_page_config(page_title="NHH Margin Template Builder", layout="wide")
st.title("🔧 NHH Margin Template Builder")

# --- Test GitHub Connection ---
st.markdown("### 🔗 Test GitHub Connection")
github_url = "https://raw.githubusercontent.com/ChrisBeardsmore/Dyce/main/apps/power/templates/margin_template1.json"

if st.button("🧪 Test GitHub Template Loading"):
    try:
        response = requests.get(github_url + f"?v={datetime.now().timestamp()}")
        response.raise_for_status()
        
        content = response.text.strip()
        if content.startswith('{') and content.endswith('}'):
            template_data = response.json()
            st.success("✅ GitHub template loaded successfully!")
            st.json(template_data)
        else:
            st.error("❌ File still contains Python code. GitHub cache hasn't updated yet.")
            st.code(content[:300] + "..." if len(content) > 300 else content)
    except Exception as e:
        st.error(f"❌ Error: {e}")

st.markdown("---")

# --- Step 1: Set Template Name ---
st.markdown("### 🧾 Template Metadata")
template_name = st.text_input("Enter template name:", value="nhh_template_v1")

# --- Step 2: Define Consumption Bands ---
st.markdown("### 📊 Define Consumption Bands")

if "bands" not in st.session_state:
    st.session_state.bands = [
        {"min": 0, "max": 5000},
        {"min": 5000, "max": 15000},
        {"min": 15000, "max": 50000},
        {"min": 50000, "max": 150000},
        {"min": 150000, "max": 500000}
    ]

num_bands = st.number_input("How many bands?", min_value=1, max_value=10, value=len(st.session_state.bands))

# Adjust bands list
while len(st.session_state.bands) < num_bands:
    last_max = st.session_state.bands[-1]["max"] if st.session_state.bands else 0
    st.session_state.bands.append({"min": last_max, "max": last_max + 10000})
while len(st.session_state.bands) > num_bands:
    st.session_state.bands.pop()

# Band configuration
bands = []
for i in range(num_bands):
    st.markdown(f"**Band {i+1}**")
    cols = st.columns(2)
    
    min_kwh = cols[0].number_input(
        f"Min kWh – Band {i+1}", 
        key=f"min_{i}", 
        min_value=0, 
        value=st.session_state.bands[i]["min"]
    )
    max_kwh = cols[1].number_input(
        f"Max kWh – Band {i+1}", 
        key=f"max_{i}", 
        min_value=min_kwh + 1, 
        value=max(st.session_state.bands[i]["max"], min_kwh + 1)
    )
    
    bands.append({"Min": min_kwh, "Max": max_kwh})
    
    # Update session state
    st.session_state.bands[i] = {"min": min_kwh, "max": max_kwh}

# --- Step 3: Define Uplifts Per Band ---
st.markdown("### 💸 Uplift Inputs Per Band")
band_uplifts = []

for i, band in enumerate(bands):
    st.markdown(f"**Band {i+1}: {band['Min']:,} – {band['Max']:,} kWh**")
    cols = st.columns(5)
    
    standard_rate = cols[0].number_input("Standard Rate (p/kWh)", min_value=0.0, key=f"sr_{i}")
    day_rate = cols[1].number_input("Day Rate (p/kWh)", min_value=0.0, key=f"dr_{i}")
    night_rate = cols[2].number_input("Night Rate (p/kWh)", min_value=0.0, key=f"nr_{i}")
    ew_rate = cols[3].number_input("E&W Rate (p/kWh)", min_value=0.0, key=f"ew_{i}")
    standing_charge = cols[4].number_input("Standing Charge (p/day)", min_value=0.0, key=f"sc_{i}")

    band_uplifts.append({
        "Min": band["Min"],
        "Max": band["Max"],
        "Standard_Rate": standard_rate,
        "Day_Rate": day_rate,
        "Night_Rate": night_rate,
        "Evening_And_Weekend_Rate": ew_rate,
        "Standing_Charge": standing_charge
    })

# --- Step 4: Preview & Save Template ---
st.markdown("### 💾 Save Margin Template")

template = {
    "template_name": template_name,
    "description": "Generated by NHH Margin Template Builder",
    "created_date": datetime.now().strftime("%Y-%m-%d"),
    "bands": band_uplifts
}

# Preview
with st.expander("📋 Preview Template JSON"):
    st.json(template)

# Download options
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("💾 Download JSON Template"):
        json_data = json.dumps(template, indent=2)
        st.download_button(
            label="⬇️ Download JSON File",
            data=json_data,
            file_name=f"{template_name}.json",
            mime="application/json"
        )

with col2:
    if st.button("📋 Copy JSON to Clipboard"):
        json_data = json.dumps(template, indent=2)
        st.code(json_data, language="json")
        st.info("👆 Copy the JSON above")

with col3:
    st.markdown("**🚀 Next Steps:**")
    st.markdown("1. Download JSON")
    st.markdown("2. Commit to GitHub")
    st.markdown("3. Test URL above")

# --- Footer ---
st.markdown("---")
st.markdown("💡 **Tip:** After creating templates, use them in your pricing tools!")
